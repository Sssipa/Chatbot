{{-- resources/views/chatbot.edge --}}
<div class="flex h-screen">
    {{-- Kalau di route chatbot, tampilkan side navbar --}}
    {{-- Include sidebar component dan kirimkan chatHistories dan DateTime --}}
    {{-- PERBAIKAN DI SINI: Gunakan Js.object() untuk passing variabel ke include --}}
    {{-- request objek tidak perlu di-pass karena sudah tersedia di scope view utama --}}
    @include('components/sidebar')

    {{-- Konten utama untuk menampilkan chat --}}
    <div x-data="chatBot( {{ chatDaata }} )"
        class="flex-1 p-2 sm:p-6 justify-between flex flex-col h-screen bg-white w-full sm:w-400">
        <div id="messages"
            class="flex flex-col space-y-4 p-3 overflow-y-auto scrollbar-thumb-blue scrollbar-thumb-rounded scrollbar-track-blue-lighter scrollbar-w-2 scrolling-touch">
            <template x-for="(message, key) in messages" :key="key">
                <div>
                    <div class="flex items-end" :class="message.from=='bot'?'':'justify-end'">
                        <div class="flex flex-col space-y-2 text-md leading-tight max-w-lg mx-2"
                            :class="message.from=='bot'?'order-2 items-start':'order-1 items-end'">
                            <div>
                                <span class="px-4 py-3 rounded-xl inline-block"
                                    :class="message.from=='bot'?'rounded-bl-none bg-gray-100 text-gray-600':'rounded-br-none bg-blue-500 text-white'"
                                    x-html="message.text"></span>
                            </div>
                        </div>
                        <img :src="message.from=='bot'?'https://cdn.icon-icons.com/icons2/1371/PNG/512/robot02_90810.png':'https://i.pravatar.cc/100?img=7'"
                            alt="" class="w-6 h-6 rounded-full" :class="message.from=='bot'?'order-1':'order-2'">
                    </div>
                </div>
            </template>
            <div x-show="botTyping" style="display: none;">
                <div class="flex items-end">
                    <div class="flex flex-col space-y-2 text-md leading-tight mx-2 order-2 items-start">
                        <div><img
                                src="https://support.signal.org/hc/article_attachments/360016877511/typing-animation-3x.gif"
                                alt="..." class="w-16 ml-6"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="border-t-2 border-gray-200 px-4 pt-4">
            <div class="relative flex">
                {{-- ini input bagaimana cara kerjanya broo? --}}
                <input type="text" placeholder="Tanyakan seputar parenting..." autocomplete="off" autofocus="true"
                    @keydown.enter="sendMessage($event.target)"
                    class="text-md w-full focus:outline-none focus:placeholder-gray-400 text-gray-600 placeholder-gray-600 pl-5 pr-16 bg-gray-100 border-2 border-gray-200 focus:border-blue-500 rounded-full py-2"
                    x-ref="input" />
                <div class="absolute right-2 items-center inset-y-0 hidden sm:flex">
                    <button type="button"
                        class="inline-flex items-center justify-center rounded-full h-8 w-8 transition duration-200 ease-in-out text-white bg-blue-500 hover:bg-blue-600 focus:outline-none"
                        @click.prevent="sendMessage($refs.input)">
                        <i class="mdi mdi-arrow-right text-xl leading-none"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    @import url('https://cdnjs.cloudflare.com/ajax/libs/MaterialDesign-Webfont/5.3.45/css/materialdesignicons.min.css');
</style>
@vite(['resources/css/app.css', 'resources/js/app.js'])

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<script>
    function chatBot(initialData) { // Menerima initialData dari Blade
        return {
            botTyping: false,
            messages: [], // Awalnya kosong, akan diisi di init()

            init() {
                // Inisialisasi pesan berdasarkan historyId atau pesan default
                if (initialData && initialData.selectedHistoryId) {
                    const selectedChat = initialData.histories.find(chat => chat.id == initialData.selectedHistoryId);
                    if (selectedChat) {
                        this.messages = [
                            { from: 'user', text: selectedChat.user_message },
                            { from: 'bot', text: selectedChat.bot_response }
                        ];
                        // Jika Anda memiliki riwayat multi-turn yang lebih panjang, Anda perlu memuat lebih banyak data dari backend
                        // Atau pastikan `selectedChat` berisi semua pesan dari sesi tersebut.
                    } else {
                        // Jika historyId tidak ditemukan, tampilkan pesan default
                        this.messages = [{ from: 'bot', text: 'Halo! Saya adalah asisten parenting Anda. Apa yang ingin Anda tanyakan hari ini?' }];
                    }
                } else {
                    // Tampilan default untuk chat baru
                    this.messages = [{ from: 'bot', text: 'Halo! Saya adalah asisten parenting Anda. Apa yang ingin Anda tanyakan hari ini?' }];
                }
                this.scrollChat();
            },

            // Fungsi untuk mengirim pesan ke API
            sendMessage: async function (target) {
                const chatInput = target.value.trim();

                // Perbaikan: Penanganan sessionId di localStorage
                // Gunakan sessionId yang ada di localStorage atau generate baru
                // Ini penting agar n8n bisa melacak sesi yang sama
                const sessionId = localStorage.getItem("chat_session") || crypto.randomUUID();
                localStorage.setItem("chat_session", sessionId);

                if (!chatInput) return;

                // Tambahkan pesan pengguna ke daftar pesan
                this.messages.push({
                    from: 'user',
                    text: chatInput
                });

                // Kosongkan input
                target.value = '';

                // Scroll ke bawah
                this.scrollChat();

                // Tampilkan indikator mengetik
                setTimeout(() => {
                    this.botTyping = true;
                    this.scrollChat();
                }, 500);

                try {
                    // Panggil API endpoint
                    const response = await fetch('/api/chatbot/message', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            chatInput: chatInput,
                            sessionId: sessionId
                        }),
                    });

                    // Periksa status respons
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    // Parse respons JSON
                    const data = await response.json();
                    console.log("Respons dari server:", data);

                    // Tambahkan respons bot
                    setTimeout(() => {
                        this.botTyping = false;
                        this.messages.push({
                            from: 'bot',
                            text: data.response || 'Maaf, saya tidak dapat memproses permintaan Anda saat ini.'
                        });
                        this.scrollChat();
                    }, 1000);
                } catch (error) {
                    console.error('Error sending message:', error);

                    // Tambahkan pesan error
                    setTimeout(() => {
                        this.botTyping = false;
                        this.messages.push({
                            from: 'bot',
                            text: 'Maaf, saya sedang mengalami masalah koneksi. Silakan coba lagi nanti.'
                        });
                        this.scrollChat();
                    }, 1000);
                }
            },

            // Fungsi untuk scroll chat ke bawah
            scrollChat: function () {
                const messagesContainer = document.getElementById("messages");
                if (messagesContainer) {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight - messagesContainer.clientHeight;
                    // Sedikit delay tambahan untuk memastikan rendering selesai
                    setTimeout(() => {
                        messagesContainer.scrollTop = messagesContainer.scrollHeight - messagesContainer.clientHeight;
                    }, 100);
                }
            }
        }
    }
</script>